{
    "description": "<span style=\"color: rgb(36, 36, 36); font-family: source-serif-pro, Georgia, Cambria, 'Times New Roman', Times, serif; font-size: 20px; letter-spacing: -0.06px;\">The Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your applicationThe Single Responsibility Principle advocates that a class should have only one reason to change. In Laravel, this translates to ensuring that each class is responsible for a single aspect of your application</span>"
}